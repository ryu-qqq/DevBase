plugins {
    id 'java-library'
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management'
    id 'io.spring.javaformat' apply(false)
    id 'org.asciidoctor.jvm.convert' apply(false)
    id 'jacoco'
}

allprojects {
    group = "${projectGroup}"
    version = "${applicationVersion}"
    sourceCompatibility = project.javaVersion

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'jacoco'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersions}"
        }
    }

    dependencies {
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.junit.platform:junit-platform-suite:${junitPlatFormVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation 'com.h2database:h2'
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    tasks.test {
        useJUnitPlatform {
            excludeTags('develop', 'restdocs')
        }
        finalizedBy jacocoTestReport
    }

    tasks.named('jacocoTestReport') {
        dependsOn test
        reports {
            html.required.set(true)
            xml.required.set(false)
            csv.required.set(false)
        }
        classDirectories.setFrom(
                fileTree(dir: "$buildDir/classes/java/main").matching {
                    exclude '**/Q*', '**/config/**', '**/application/**'
                }
        )
        sourceDirectories.setFrom(files("src/main/java"))
        executionData.setFrom(fileTree(dir: buildDir).include("jacoco/test.exec"))
    }

    tasks.named('jacocoTestCoverageVerification') {
        dependsOn test
        violationRules {
            rule {
                element = 'CLASS'
//                limit {
//                    minimum = 0.8
//                }
            }
            rule {
                element = 'METHOD'
//                limit {
//                    minimum = 0.7
//                }
            }
        }
        classDirectories.setFrom(
                fileTree(dir: "$buildDir/classes/java/main").matching {
                    exclude '**/Q*', '**/config/**', '**/application/**', '**/generated/**'
                }
        )
        executionData.setFrom(fileTree(dir: buildDir).include("jacoco/test.exec"))
    }

    bootJar.enabled = false
    jar.enabled = true

    tasks.register('unitTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            excludeTags('develop', 'context', 'restdocs')
        }
    }

    tasks.register('contextTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            includeTags('context')
        }
    }

    tasks.register('restDocsTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            includeTags('restdocs')
        }
    }

    tasks.named('asciidoctor') {
        dependsOn restDocsTest
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ['-parameters']
    }
}

tasks.register("jacocoTestReportAll") {
    dependsOn subprojects.collect { subproject ->
        subproject.tasks.matching { it.name == "jacocoTestReport" }
    }
}

tasks.register("jacocoTestCoverageVerificationAll") {
    dependsOn subprojects.collect { subproject ->
        subproject.tasks.matching { it.name == "jacocoTestCoverageVerification" }
    }
}
